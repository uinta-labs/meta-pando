#!/bin/sh

#
# Script which configures balena keys into hardware secure elements and
# prevents updating to a non-signed system if secure boot is enabled
#

set -o errexit

# shellcheck source=/dev/null
. /usr/libexec/os-helpers-logging
# shellcheck disable=SC1091
[ -f /usr/libexec/os-helpers-tpm2 ] && . /usr/libexec/os-helpers-tpm2

DURING_UPDATE="${DURING_UPDATE:-0}"
UMOUNT_EFIVARS=0
SECUREBOOT_VAR="8be4df61-93ca-11d2-aa0d-00e098032b8c-SecureBoot"
SETUPMODE_VAR="8be4df61-93ca-11d2-aa0d-00e098032b8c-SetupMode"
EFIVAR_RE="s,^[^ ]*  *\([^ ]*\) .*$,\1,"
EFIVARS_MOUNTDIR="/sys/firmware/efi/efivars"

exit_with_msg() {
    result=$?
    exit ${result}
}
trap exit_with_msg EXIT

mountEfiVars() {
    # Mount efivarfs if necessary
    if ! mount | grep -q "type efivarfs"; then
        mount -t efivarfs efivarfs "${EFIVARS_MOUNTDIR}"
        UMOUNT_EFIVARS=1
    fi
}

umountEfiVars() {
    # Leave the system in the original state - unmount efivarfs if we mounted it
    if [ "${UMOUNT_EFIVARS}" = 1 ]; then
        umount "${EFIVARS_MOUNTDIR}"
        UMOUNT_EFIVARS=0
    fi
}

updateKeys() {
    PCRS="0,2,3,7"
    PCR_VAL_BIN_CURRENT="$(mktemp -t)"
    PCR_VAL_BIN_UPDATED="$(mktemp -t)"
    PCR_VAL_BIN_EFIBIN="$(mktemp -t)"
    GRUB_BIN="$(find /mnt/sysroot/inactive -name bootx64.efi.secureboot -print -quit)"
    KERNEL_BIN="$(find /mnt/sysroot/inactive -name bzImage -print -quit)"
    if [ -z "${GRUB_BIN}" ] || [ -z "${KERNEL_BIN}" ]; then
        fail "Unable to add kernel and bootloader hashes to PCR7 digest"
    fi

    EFI_BINARIES="${GRUB_BIN} ${KERNEL_BIN}"

    for pcr in $(echo ${PCRS} | sed 's/,/ /g'); do
        case $pcr in
            7)
                # the signatures from the updated database are appended to the
                # existing variable, removing duplicates
                SIGNATURE_LENGTH=76 # sizeof(EFI_SIGNATURE_LIST) + SHA256_DIGEST_SIZE + EFI_GUID_SIZE
                db_override="$( \
                    { dd if=/sys/firmware/efi/efivars/"db-${EFI_IMAGE_SECURITY_DATABASE_GUID}" \
                         status=none \
                         bs=1 \
                         skip=4 | xxd -p -c ${SIGNATURE_LENGTH} ; \
                      dd if=/pando-boot/balena-keys/db.esl \
                         status=none | xxd -p -c ${SIGNATURE_LENGTH} ; \
                    } | awk '!seen[$0]++' )"
                current_digest="$(tpm2_pcrread --quiet "sha256:$pcr" -o /proc/self/fd/1 | _hexencode)"
                #shellcheck disable=SC2154
                updated_digest="$(compute_pcr7 "${secureboot_override}" \
                                               "${pk_override}" \
                                               "${kek_override}" \
                                               "${db_override}" \
                                               "${dbx_override}")"

                cp "${PCR_VAL_BIN_CURRENT}" "${PCR_VAL_BIN_UPDATED}"
                printf "%s" "$updated_digest" | _hexdecode \
                    | dd of="${PCR_VAL_BIN_UPDATED}" \
                         status=none \
                         bs=1 \
                         seek="$(du -b "${PCR_VAL_BIN_UPDATED}" | cut -f1)"

                # This OS release may not have the bootloader version required
                # to read the TPM event log, which means we can't assess if the
                # firmware measures EFI binary signatures into PCR7.
                #
                # Create a combined policy that authenticates with PCR7 values
                # calculated with and without the EFI binary hashes.
                cp "${PCR_VAL_BIN_CURRENT}" "${PCR_VAL_BIN_EFIBIN}"
                for bin in ${EFI_BINARIES}; do
                    extend="$(tcgtool -s "$bin" \
                            | tcgtool -e "db-${EFI_IMAGE_SECURITY_DATABASE_GUID}" \
                            | _sha256 )"
                    updated_digest=$(printf '%s%s' "$updated_digest" "$extend" | _hexdecode | _sha256)
                done

                printf "%s" "$updated_digest" | _hexdecode \
                    | dd of="${PCR_VAL_BIN_EFIBIN}" \
                         status=none \
                         bs=1 \
                         seek="$(du -b "${PCR_VAL_BIN_EFIBIN}" | cut -f1)"
                digest="$current_digest"
            ;;
            *)
                digest="$(tpm2_pcrread --quiet "sha256:$pcr" -o /proc/self/fd/1 | _hexencode)"
            ;;
        esac

        printf "%s" "$digest" | _hexdecode \
            | dd of="${PCR_VAL_BIN_CURRENT}" \
                 status=none \
                 bs=1 \
                 seek="$(du -b "${PCR_VAL_BIN_CURRENT}" | cut -f1)"
    done

    SESSION_CTX=$(mktemp -t)
    EFI_MOUNT_DIR="/mnt/efi"
    POLICY_PATH="$(mktemp -d policies.XXXXX)"
    PASSPHRASE_FILE="$(mktemp -t)"
    RESULT_DIR="$(mktemp -d)"
    CURRENT_POLICY_PATH="$(find /mnt/efi -name "policies.*")"
    for UNLOCK_PCRS in  0,2,3,7 0,1,2,3; do
        {
            tpm2_flushcontext "${SESSION_CTX}"  2>&1 || true
            tpm2_startauthsession --policy-session -S "${SESSION_CTX}"
            tpm2_policypcr -S "${SESSION_CTX}" -l "sha256:${UNLOCK_PCRS}"
            POLICIES="$(find "${CURRENT_POLICY_PATH}" -type f | sort | xargs)"
            if [ "$(echo "${POLICIES}" | wc -w)" -gt 1 ]; then
                tpm2_policyor -S "${SESSION_CTX}" "sha256:$(echo "${POLICIES}" | sed 's/ /,/g')"
            fi

        } >/dev/null

        if hw_decrypt_passphrase "$EFI_MOUNT_DIR" "session:${SESSION_CTX}" "$PASSPHRASE_FILE"; then
            UNLOCK_PCRS_SUCCESS="${UNLOCK_PCRS}"
            break
        fi
    done

    tpm2_flushcontext "${SESSION_CTX}"  >/dev/null 2>&1

    POLICY_UPDATED="${POLICY_PATH}/policy.updated"
    POLICY_EFIBIN="${POLICY_PATH}/policy.efibin"
    POLICY_COMBINED="$(mktemp -t)"
    if [ "${UNLOCK_PCRS_SUCCESS}" = "0,2,3,7" ]; then
        {
            tpm2_createpolicy --policy-pcr \
                              -l "sha256:${PCRS}" \
                              -f "${PCR_VAL_BIN_UPDATED}" \
                              -L "${POLICY_UPDATED}"
            tpm2_createpolicy --policy-pcr \
                              -l "sha256:${PCRS}" \
                              -f "${PCR_VAL_BIN_EFIBIN}" \
                              -L "${POLICY_EFIBIN}"
            tpm2_startauthsession -S "${SESSION_CTX}"
        } >/dev/null

        case "$(firmware_measures_efibins)" in
            measured)
                info "Using PCR7 digest with EFI binary measurements"
                POLICY="${POLICY_EFIBIN}"
                print_pcr_val_bin "${PCRS}" "${PCR_VAL_BIN_EFIBIN}"
                ;;
            unmeasured)
                info "Using PCR7 digest without EFI binary measurements"
                POLICY="${POLICY_UPDATED}"
                print_pcr_val_bin "${PCRS}" "${PCR_VAL_BIN_UPDATED}"
                ;;
            unknown)
                # we don't have access to the TPM event log, and can't
                # definitively tell whether or not EFI binaries are measured
                # into PCR7, so unlock with both digests
                info "Creating combined policy"
                tpm2_policyor -S "${SESSION_CTX}" \
                              -L "${POLICY_COMBINED}" \
                              "sha256:$(find "${POLICY_PATH}" -type f | sort | xargs | sed 's/ /,/g')" \
                              >/dev/null
                POLICY="${POLICY_COMBINED}"
                cp -rf "${POLICY_PATH}" "${EFI_MOUNT_DIR}"

                print_pcr_val_bin "${PCRS}" "${PCR_VAL_BIN_EFIBIN}"
                printf "\nOR\n"
                print_pcr_val_bin "${PCRS}" "${PCR_VAL_BIN_UPDATED}"
                ;;
        esac

        {
            tpm2_flushcontext "${SESSION_CTX}" 2>&1

            hw_encrypt_passphrase "$PASSPHRASE_FILE" "$POLICY" "$RESULT_DIR"
            rm -rf "${CURRENT_POLICY_PATH}"

            tpm2_evictcontrol -c "${EFI_MOUNT_DIR}/balena-luks.ctx"
            mv "${RESULT_DIR}/persistent.ctx" "${EFI_MOUNT_DIR}/balena-luks.ctx"
            mv "${RESULT_DIR}/passphrase.enc" "${EFI_MOUNT_DIR}/balena-luks.enc"
        } >/dev/null

    elif [ "${UNLOCK_PCRS_SUCCESS}" = "0,1,2,3" ]; then
        warn "Unlocked passphrase without PCR7, delaying policy update until rollback-health success"
    else
        fail "Failed to update policy sealing LUKS passphrase"
    fi

    # update the second stage bootloader kernel binary, as the hash of the
    # original may not be present in the signature database
    rsync --checksum --inplace "${KERNEL_BIN}"{,.sig} "${EFI_MOUNT_DIR}/"

    # update GRUB if necessary
    rsync --checksum --inplace "${GRUB_BIN}" "${EFI_MOUNT_DIR}/EFI/BOOT/bootx64.efi"
    sync

    # This only updates db at this moment
    # PK and KEK need to be implemented
    DB_SYSFS_FILE="db-d719b2cb-3d3a-4596-a3bc-dad00e67656f"
    chattr -i "${EFIVARS_MOUNTDIR}/${DB_SYSFS_FILE}"
    efi-updatevar -a -f "/pando-boot/balena-keys/db.auth" db
    chattr +i "${EFIVARS_MOUNTDIR}/${DB_SYSFS_FILE}"

    # dbx is updated by rollback-health when it confirms that HUP went through
    # here we just copy out the dbx update from the active partition to a pending
    # directory for rollback-health to find it later
    PENDING_DBX_DIR="/mnt/data/balenahup/pending-dbx"
    ACTIVE_ESL_FILE=$(find "/mnt/sysroot/active" -name "db.esl")
    ACTIVE_DBX_FILE=$(find "/mnt/sysroot/active" -name "dbx.auth")
    ACTIVE_DBX_FILE_MD5SUM=$(md5sum "${ACTIVE_DBX_FILE}" | cut -d " " -f 1)
    DEST_FILE="${PENDING_DBX_DIR}/dbx-${ACTIVE_DBX_FILE_MD5SUM}.auth"

    mkdir -p "${PENDING_DBX_DIR}"
    cp -a "${ACTIVE_DBX_FILE}" "${DEST_FILE}"
    sig-list-to-certs "${ACTIVE_ESL_FILE}" "${DEST_FILE}" >/dev/null
}

# Only applicable in the new OS container
if [ "${DURING_UPDATE}" != 1 ]; then
    exit 0
fi

# Only applicable on UEFI systems
if [ ! -d "/sys/firmware/efi" ]; then
    exit 0
fi

mountEfiVars

# Read EFI variables
SECUREBOOT_VAL=$(efivar -p -n "${SECUREBOOT_VAR}" | tail -n 1 | sed -e "${EFIVAR_RE}")
SETUPMODE_VAL=$(efivar -p -n "${SETUPMODE_VAR}" | tail -n 1 | sed -e "${EFIVAR_RE}")

# Only applicable when in secure boot mode
if [ -z "${SECUREBOOT_VAL}" ] || [ "${SECUREBOOT_VAL}" -ne "1" ]; then
    umountEfiVars
    exit 0
fi

# Not applicable when secure boot is in setup mode
if [ -n "${SETUPMODE_VAL}" ] && [ "${SETUPMODE_VAL}" -ne "0" ]; then
    umountEfiVars
    exit 0
fi

# Not applicable if the signatures are in place
if [ -f "/pando-boot/EFI/BOOT/grub.cfg.sig" ]; then
    updateKeys
    umountEfiVars
    exit $?
fi

umountEfiVars

# At this point we are sure the current OS is running in secure boot mode
# and the new image is not signed, abort the update
error "Trying to update to an unsigned OS version while in secure boot mode"
exit 1
